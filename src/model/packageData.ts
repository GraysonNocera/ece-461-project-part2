/**
 * ECE 461 - Spring 2023 - Project 2
 * API for ECE 461/Spring 2023/Project 2: A Trustworthy Module Registry
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: davisjam@purdue.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import mongoose from "mongoose";
import Joi from "joi";
import { transform } from "./transform";

/**
 * This is a \"union\" type. - On package upload, either Content or URL should be set. - On package update, exactly one field should be set. - On download, the Content field should be set.
 */
export interface PackageData {
  /**
   * Package contents. This is the zip file uploaded by the user. (Encoded as text using a Base64 encoding).  This will be a zipped version of an npm package\'s GitHub repository, minus the \".git/\" directory.\" It will, for example, include the \"package.json\" file that can be used to retrieve the project homepage.  See https://docs.npmjs.com/cli/v7/configuring-npm/package-json#homepage.
   */
  Content?: string;
  /**
   * Package URL (for use in public ingest).
   */
  URL?: string;
  /**
   * A JavaScript program (for use with sensitive modules).
   */
  JSProgram?: string;

  // First 150 words of the README
  Readme?: string;
}

export const PackageDataSchema: mongoose.Schema<PackageData> =
  new mongoose.Schema<PackageData>({
    Content: { type: String, required: false },
    URL: { type: String, required: false },
    JSProgram: { type: String, required: false },
    Readme: { type: String, required: false },
  });

PackageDataSchema.set("toObject", { transform });

export const PackageDataModel = mongoose.model<PackageData>(
  "PackageData",
  PackageDataSchema
);

export const PackageDataUploadValidation = Joi.object({
  Content: Joi.string(),
  URL: Joi.string(),
  JSProgram: Joi.string(),
  Readme: Joi.string(),
}).xor("Content", "URL");
