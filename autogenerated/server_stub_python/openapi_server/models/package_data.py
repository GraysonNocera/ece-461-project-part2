# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class PackageData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content=None, url=None, js_program=None):  # noqa: E501
        """PackageData - a model defined in OpenAPI

        :param content: The content of this PackageData.  # noqa: E501
        :type content: str
        :param url: The url of this PackageData.  # noqa: E501
        :type url: str
        :param js_program: The js_program of this PackageData.  # noqa: E501
        :type js_program: str
        """
        self.openapi_types = {
            'content': str,
            'url': str,
            'js_program': str
        }

        self.attribute_map = {
            'content': 'Content',
            'url': 'URL',
            'js_program': 'JSProgram'
        }

        self._content = content
        self._url = url
        self._js_program = js_program

    @classmethod
    def from_dict(cls, dikt) -> 'PackageData':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PackageData of this PackageData.  # noqa: E501
        :rtype: PackageData
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content(self):
        """Gets the content of this PackageData.

        Package contents. This is the zip file uploaded by the user. (Encoded as text using a Base64 encoding).  This will be a zipped version of an npm package's GitHub repository, minus the \".git/\" directory.\" It will, for example, include the \"package.json\" file that can be used to retrieve the project homepage.  See https://docs.npmjs.com/cli/v7/configuring-npm/package-json#homepage.  # noqa: E501

        :return: The content of this PackageData.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this PackageData.

        Package contents. This is the zip file uploaded by the user. (Encoded as text using a Base64 encoding).  This will be a zipped version of an npm package's GitHub repository, minus the \".git/\" directory.\" It will, for example, include the \"package.json\" file that can be used to retrieve the project homepage.  See https://docs.npmjs.com/cli/v7/configuring-npm/package-json#homepage.  # noqa: E501

        :param content: The content of this PackageData.
        :type content: str
        """

        self._content = content

    @property
    def url(self):
        """Gets the url of this PackageData.

        Package URL (for use in public ingest).  # noqa: E501

        :return: The url of this PackageData.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this PackageData.

        Package URL (for use in public ingest).  # noqa: E501

        :param url: The url of this PackageData.
        :type url: str
        """

        self._url = url

    @property
    def js_program(self):
        """Gets the js_program of this PackageData.

        A JavaScript program (for use with sensitive modules).  # noqa: E501

        :return: The js_program of this PackageData.
        :rtype: str
        """
        return self._js_program

    @js_program.setter
    def js_program(self, js_program):
        """Sets the js_program of this PackageData.

        A JavaScript program (for use with sensitive modules).  # noqa: E501

        :param js_program: The js_program of this PackageData.
        :type js_program: str
        """

        self._js_program = js_program
