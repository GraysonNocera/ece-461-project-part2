# 
# ECE 461 - Spring 2023 - Project 2
# 
# 
# API for ECE 461/Spring 2023/Project 2: A Trustworthy Module Registry
# 
# Version: 2.0.0
# Contact: davisjam@purdue.edu
# Generated by OpenAPI Generator: https://openapi-generator.tech

# package openapi3graphql-server

# default_api



input CreateAuthTokenInput {
    
    authenticationRequest: AuthenticationRequestInput
}

input PackageByNameDeleteInput {
    
    name: String!, 
    # 
    xAuthorization: String!
}

input PackageByRegExGetInput {
    
    regex: String!, 
    
    body: String!, 
    # 
    xAuthorization: String!
}

input PackageCreateInput {
    # 
    xAuthorization: String!, 
    
    packageData: PackageDataInput
}

input PackageDeleteInput {
    # Package ID
    Id_: String!, 
    # 
    xAuthorization: String!
}

input PackageUpdateInput {
    # 
    Id_: String!, 
    
    package: PackageInput, 
    # 
    xAuthorization: String!
}

input PackagesListInput {
    
    packageQuery: [PackageQueryInput], 
    # 
    xAuthorization: String!, 
    # Provide this for pagination. If not provided, returns the first page of results.
    offset: String!
}

input RegistryResetInput {
    # 
    xAuthorization: String!
}

type Mutation {
  # Create an access token.
  # @param AuthenticationRequest authenticationRequest 
  # @return [String!]
  CreateAuthToken(input: CreateAuthTokenInput!): String!
  # Delete all versions of this package.
  # @param String! name 
  # @param String! xAuthorization 
  # @return [Boolean]
  PackageByNameDelete(input: PackageByNameDeleteInput!): Boolean
  # Get any packages fitting the regular expression.
  # Search for a package using regular expression over package names and READMEs. This is similar to search by name.
  # @param String! regex 
  # @param String! body 
  # @param String! xAuthorization 
  # @return [PackageMetadata]
  PackageByRegExGet(input: PackageByRegExGetInput!): PackageMetadata
  # @param String! xAuthorization 
  # @param PackageData packageData 
  # @return [Package]
  PackageCreate(input: PackageCreateInput!): Package
  # Delete this version of the package.
  # @param String! Id_ Package ID
  # @param String! xAuthorization 
  # @return [Boolean]
  PackageDelete(input: PackageDeleteInput!): Boolean
  # Update this content of the package.
  # The name, version, and ID must match.  The package contents (from PackageData) will replace the previous contents.
  # @param String! Id_ 
  # @param Package package 
  # @param String! xAuthorization 
  # @return [Boolean]
  PackageUpdate(input: PackageUpdateInput!): Boolean
  # Get the packages from the registry.
  # Get any packages fitting the query. Search for packages satisfying the indicated query.  If you want to enumerate all packages, provide an array with a single PackageQuery whose name is \&quot;*\&quot;.  The response is paginated; the response header includes the offset to use in the next query.
  # @param PackageQuery packageQuery 
  # @param String! xAuthorization 
  # @param String! offset Provide this for pagination. If not provided, returns the first page of results.
  # @return [PackageMetadata]
  PackagesList(input: PackagesListInput!): PackageMetadata
  # Reset the registry
  # Reset the registry to a system default state.
  # @param String! xAuthorization 
  # @return [Boolean]
  RegistryReset(input: RegistryResetInput!): Boolean
}

type Query {
  # Return the history of this package (all versions).
  # @param String! name 
  # @param String! xAuthorization 
  # @return [PackageHistoryEntry]
  PackageByNameGet(name: String!, xAuthorization: String!): PackageHistoryEntry
  # @param String! Id_ 
  # @param String! xAuthorization 
  # @return [PackageRating]
  PackageRate(Id_: String!, xAuthorization: String!): PackageRating
  # Interact with the package with this ID
  # Return this package.
  # @param String! Id_ ID of package to fetch
  # @param String! xAuthorization 
  # @return [Package]
  PackageRetrieve(Id_: String!, xAuthorization: String!): Package
}

