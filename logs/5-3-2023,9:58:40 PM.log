info: connectToMongo(): Connecting to MongoDB...
info: Starting up the API server...
info: API server listening on port 3000
info: connectToMongo(): Connected to MongoDB
info: req{"Content":""}
info: authorizeUser: Authorizing user...
info: authorizeUser: Auth received eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjp7IlVzZXIiOnsibmFtZSI6ImVjZTMwODYxZGVmYXVsdGFkbWludXNlciIsImlzQWRtaW4iOnRydWUsImlzU2VhcmNoIjp0cnVlLCJpc0Rvd25sb2FkIjp0cnVlLCJpc1VwbG9hZCI6dHJ1ZX0sIlNlY3JldCI6eyJwYXNzd29yZCI6ImNvcnJlY3Rob3JzZWJhdHRlcnlzdGFwbGUxMjMoIV9fK0AqKihBJ1wiYDtEUk9QIFRBQkxFIHBhY2thZ2VzOyJ9fSwiaWF0IjoxNjgyNjAwNDU1LCJleHAiOjE2ODI2MzY0NTV9.9bCTLJoeuyDt3u40qyFo87PJiJ3DoHMMsdhXpvhRwRg
debug: authorizeUser: error: TokenExpiredError: jwt expired
info: req{"User":{"name":"ece30861defaultadminuser","isAdmin":true,"isSearch":true,"isDownload":true,"isUpload":true},"Secret":{"password":"correcthorsebatterystaple123(!__+@**(A'\"`;DROP TABLE packages;"}}
info: authorizeUser: Authorizing user...
info: authorizeUser: Auth received 
info: authorizeUser: auth success
info: PUT /authenticate
info: Auth data: {"User":{"name":"ece30861defaultadminuser","isAdmin":true,"isSearch":true,"isDownload":true,"isUpload":true},"Secret":{"password":"correcthorsebatterystaple123(!__+@**(A'\"`;DROP TABLE packages;"}}
info: Authentication successful
info: req{"Content":""}
info: authorizeUser: Authorizing user...
info: authorizeUser: Auth received eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjp7IlVzZXIiOnsibmFtZSI6ImVjZTMwODYxZGVmYXVsdGFkbWludXNlciIsImlzQWRtaW4iOnRydWUsImlzU2VhcmNoIjp0cnVlLCJpc0Rvd25sb2FkIjp0cnVlLCJpc1VwbG9hZCI6dHJ1ZX0sIlNlY3JldCI6eyJwYXNzd29yZCI6ImNvcnJlY3Rob3JzZWJhdHRlcnlzdGFwbGUxMjMoIV9fK0AqKihBJ1wiYDtEUk9QIFRBQkxFIHBhY2thZ2VzOyJ9fSwiaWF0IjoxNjgzMTY1MzY2LCJleHAiOjE2ODMyMDEzNjZ9.l6Jyd3iQX5Wgj3YiR3jWfQULGMrPaa6PDJG2DFxrZCw
info: auth success
info: Validate: Validating request body
info: postPackage: POST /package endpoint hit
info: postPackage: didUploadURL: false
info: unzipContent: Unzipping content
info: Base path to repo: /Users/graysonnocera/Desktop/Spring2023/ECE461/ProjectRepos/ece-461-project-part2/src/artifacts/unzipped/davisjam-safe-regex-9041d80
info: postPackage: basePath: /Users/graysonnocera/Desktop/Spring2023/ECE461/ProjectRepos/ece-461-project-part2/src/artifacts/unzipped/davisjam-safe-regex-9041d80
info: getPackageJSON: Getting url from content base64 string
info: getPackageJSONObject: Getting package.json object
info: getPackageJSONObject: Found package.json
info: postPackage: packageToUpload.data.URL from package_json['hompage']: https://github.com/davisjam/safe-regex
info: getMetadata: Getting metadata from package
info: getMetadata: Getting metadata from package.json
info: Successfully got metadata from package: name: safe-regex version: 2.1.2
info: Checking if package name is in database
info: POST /package: Writing file to /Users/graysonnocera/Desktop/Spring2023/ECE461/ProjectRepos/ece-461-project-part2/src/artifacts/safe-regex.txt from content
info: getReadme: Getting readme from content base64 string, basePath: /Users/graysonnocera/Desktop/Spring2023/ECE461/ProjectRepos/ece-461-project-part2/src/artifacts/unzipped/davisjam-safe-regex-9041d80
info: getReadme: Found readme
info: POST /package: Saving package: {
  data: {
    Content: ''... 21476 more characters,
    URL: 'https://github.com/davisjam/safe-regex'
  },
  metadata: { Name: 'safe-regex', Version: '2.1.2', ID: '' }
}
debug: uploadFileToMongo: No file to delete in mongo with ID 645310cc1daffe4ed638018c
info: uploadFileToMongo: Uploading file to MongoDB: safe-regex.txt
info: POST /package: Package metadata added successfully {
  Name: 'safe-regex',
  Version: '2.1.2',
  ID: '645310cc1daffe4ed638018c',
  _id: new ObjectId("645310cc1daffe4ed638018f")
}
info: POST /package: Package created successfully
info: deleteUnzippedFolder: Deleting unzipped folder
info: deleteUnzippedFolder: Deleted unzipped folder
info: uploadFileToMongo: File Inserted into mongo with ID 645310cc1daffe4ed638018c, deleting it locally
info: deleteBase64File: Deleting base64 file
info: deleteBase64File: Deleted base64 file
info: req{"URL":"https://github.com/facebook/react"}
info: authorizeUser: Authorizing user...
info: authorizeUser: Auth received eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjp7IlVzZXIiOnsibmFtZSI6ImVjZTMwODYxZGVmYXVsdGFkbWludXNlciIsImlzQWRtaW4iOnRydWUsImlzU2VhcmNoIjp0cnVlLCJpc0Rvd25sb2FkIjp0cnVlLCJpc1VwbG9hZCI6dHJ1ZX0sIlNlY3JldCI6eyJwYXNzd29yZCI6ImNvcnJlY3Rob3JzZWJhdHRlcnlzdGFwbGUxMjMoIV9fK0AqKihBJ1wiYDtEUk9QIFRBQkxFIHBhY2thZ2VzOyJ9fSwiaWF0IjoxNjgzMTY1MzY2LCJleHAiOjE2ODMyMDEzNjZ9.l6Jyd3iQX5Wgj3YiR3jWfQULGMrPaa6PDJG2DFxrZCw
info: auth success
info: Validate: Validating request body
info: postPackage: POST /package endpoint hit
info: postPackage: didUploadURL: true
info: getMetadata: Getting metadata from package
info: getMetadata: Getting metadata from URL
info: getGitRepoDetails: Extracted username: facebook and repoName: react
info: getVersionFromURL: latest release: 
info: Successfully got metadata from package: name: react version: v18.2.0
info: Checking if package name is in database
info: ratePackage: Running rate script on url https://github.com/facebook/react...
